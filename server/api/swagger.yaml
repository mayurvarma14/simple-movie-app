openapi: '3.0.0'
info:
  version: 1.0.0
  title: Movie App
  license:
    name: MIT
servers:
  - url: http://127.0.0.1:5000
security:
  - BearerAuth: []
paths:
  /users/profile:
    get:
      summary: Get a current user profile details
      tags: [User]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: An users object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/login:
    post:
      summary: Logs user into the system
      tags: [User]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: A user schema
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/register:
    post:
      summary: Create a new user
      tags: [User]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: A user schema
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /movies/:
    post:
      summary: Add new movie
      tags: [Movie]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Movie'
      responses:
        '200':
          description: A movie schema
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
  /genres/:
    post:
      summary: Add new genre
      tags: [Genre]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Genre'
      responses:
        '200':
          description: A genre schema
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User Email
        password:
          type: string
          description: User Password
      example:
        email: test@test.com
        password: '123456'
    User:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
        email:
          type: string
          format: email
          description: User Email
        password:
          type: string
          description: User Password
        role:
          type: string
          description: User Role can be 'user' or 'admin'
      example:
        name: Test
        email: test@test.com
        password: '123456'
        role: admin
    Genre:
      type: object
      required:
        - title
      properties:
        title:
          type: string
      example:
        title: Action
    Movie:
      type: object
      required:
        - name
        - imdbScore
        - genre
        - director
        - popularity
      properties:
        name:
          type: string
        imdbScore:
          type: number
        genre:
          type: array
          items:
            type: array
            items:
              type: string
          description: genre id
        director:
          type: string
        popularity:
          type: number
      example:
        name: Test
        imdbScore: 5.5
        genre: ['123456']
        director: test
        popularity: 45
